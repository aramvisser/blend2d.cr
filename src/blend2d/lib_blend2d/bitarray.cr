# This file is automatically generated and should not be manually edited

module Blend2D
  @[Link("blend2d")]
  lib LibBlend2D
    fun blBitArrayInit(self : BLBitArrayCore*) : BLResult
    fun blBitArrayInitMove(self : BLBitArrayCore*, other : BLBitArrayCore*) : BLResult
    fun blBitArrayInitWeak(self : BLBitArrayCore*, other : BLBitArrayCore*) : BLResult
    fun blBitArrayDestroy(self : BLBitArrayCore*) : BLResult
    fun blBitArrayReset(self : BLBitArrayCore*) : BLResult
    fun blBitArrayAssignMove(self : BLBitArrayCore*, other : BLBitArrayCore*) : BLResult
    fun blBitArrayAssignWeak(self : BLBitArrayCore*, other : BLBitArrayCore*) : BLResult
    fun blBitArrayAssignWords(self : BLBitArrayCore*, word_data : UInt32*, word_count : UInt32) : BLResult
    fun blBitArrayIsEmpty(self : BLBitArrayCore*) : Int32
    fun blBitArrayGetSize(self : BLBitArrayCore*) : UInt32
    fun blBitArrayGetWordCount(self : BLBitArrayCore*) : UInt32
    fun blBitArrayGetCapacity(self : BLBitArrayCore*) : UInt32
    fun blBitArrayGetData(self : BLBitArrayCore*) : UInt32*
    fun blBitArrayGetCardinality(self : BLBitArrayCore*) : UInt32
    fun blBitArrayGetCardinalityInRange(self : BLBitArrayCore*, start_bit : UInt32, end_bit : UInt32) : UInt32
    fun blBitArrayHasBit(self : BLBitArrayCore*, bit_index : UInt32) : Int32
    fun blBitArrayHasBitsInRange(self : BLBitArrayCore*, start_bit : UInt32, end_bit : UInt32) : Int32
    fun blBitArraySubsumes(a : BLBitArrayCore*, b : BLBitArrayCore*) : Int32
    fun blBitArrayIntersects(a : BLBitArrayCore*, b : BLBitArrayCore*) : Int32
    fun blBitArrayGetRange(self : BLBitArrayCore*, start_out : UInt32*, end_out : UInt32*) : Int32
    fun blBitArrayEquals(a : BLBitArrayCore*, b : BLBitArrayCore*) : Int32
    fun blBitArrayCompare(a : BLBitArrayCore*, b : BLBitArrayCore*) : Int32
    fun blBitArrayClear(self : BLBitArrayCore*) : BLResult
    fun blBitArrayResize(self : BLBitArrayCore*, n_bits : UInt32) : BLResult
    fun blBitArrayReserve(self : BLBitArrayCore*, n_bits : UInt32) : BLResult
    fun blBitArrayShrink(self : BLBitArrayCore*) : BLResult
    fun blBitArraySetBit(self : BLBitArrayCore*, bit_index : UInt32) : BLResult
    fun blBitArrayFillRange(self : BLBitArrayCore*, start_bit : UInt32, end_bit : UInt32) : BLResult
    fun blBitArrayFillWords(self : BLBitArrayCore*, bit_index : UInt32, word_data : UInt32*, word_count : UInt32) : BLResult
    fun blBitArrayClearBit(self : BLBitArrayCore*, bit_index : UInt32) : BLResult
    fun blBitArrayClearRange(self : BLBitArrayCore*, start_bit : UInt32, end_bit : UInt32) : BLResult
    fun blBitArrayClearWord(self : BLBitArrayCore*, bit_index : UInt32, word_value : UInt32) : BLResult
    fun blBitArrayClearWords(self : BLBitArrayCore*, bit_index : UInt32, word_data : UInt32*, word_count : UInt32) : BLResult
    fun blBitArrayReplaceOp(self : BLBitArrayCore*, n_bits : UInt32, data_out : UInt32**) : BLResult
    fun blBitArrayReplaceBit(self : BLBitArrayCore*, bit_index : UInt32, bit_value : Int32) : BLResult
    fun blBitArrayReplaceWord(self : BLBitArrayCore*, bit_index : UInt32, word_value : UInt32) : BLResult
    fun blBitArrayReplaceWords(self : BLBitArrayCore*, bit_index : UInt32, word_data : UInt32*, word_count : UInt32) : BLResult
    fun blBitArrayAppendBit(self : BLBitArrayCore*, bit_value : Int32) : BLResult
    fun blBitArrayAppendWord(self : BLBitArrayCore*, word_value : UInt32) : BLResult
    fun blBitArrayAppendWords(self : BLBitArrayCore*, word_data : UInt32*, word_count : UInt32) : BLResult

    struct BLBitArrayCore
      _d : BLBitArrayImpl*
    end

    struct BLBitArrayImpl
      size : UInt32
      capacity : UInt32
    end
  end
end
